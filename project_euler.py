# 1. If we list all the natural numbers below 10 that are multiples of 3 or 5,
# we get 3, 5, 6 and 9. The sum of these multiples is 23.
# Find the sum of all the multiples of 3 or 5 below 1000.

x = 0
for a in range (1,1000):
    if a % 3 == 0 or a % 5 == 0:
        x += a

print("Euler 1 answer: Sum = " + str(x) + "\n")

# x = 233168

#%%

# 2. By considering the terms in the Fibonacci sequence whose values do not exceed 
# four million, find the sum of the even-valued terms.

b = [0, 1]
c = 1
while b[c] < 4000000:
    d = b[c-1] + b[c]
    b.append(d)
    c += 1

e = 0
for each in b:
    if each < 4000000 and each % 2 == 0:
        e += each

print("Euler 2 answer: Sum = " + str(e) + "\n")

# e = 4613732

#%%

# 3. What is the largest prime factor of the number 600851475143?

# source: https://www.grae.io/post/euler_problem_3/ 
# explains how for any number n, its smallest prime factor is 
# less than or equal to its square root

import numpy as np
target = 600851475143
target_sqrt = int(np.round(np.sqrt(600851475143)))
print(target_sqrt)
# %%
# given: every prime number above 2 is odd
# I am using a modified version of Prof. Alonzi's primesList functions 
# using numpy because I've already imported it
def isPrime(n):
    """
    Function which returns True if the integer n is prime. Tests integers
    d from two up to Dmax = scipy.sqrt(n), stopping if any are divisors of n
    (or, test if n is even and then test odd divisors). This is most naturally
    done using the "while" command, 
      while n%d != 0 and d <= Dmax:
          d+=1		[or 2]
    What condition will d satisfy after the while loop if n is prime?
    """
    Dmax = np.sqrt(n)
    if n == 2:
        return True
    elif n % 2 == 0:
        return False
    d = 3
    while n%d != 0 and d <= Dmax:
        d += 2
    return d > Dmax

def primeList(nMax):
    """
    Returns a list of all prime numbers less than nMax.
    You can use isPrime to generate a list of primes using the nice 
    Python feature of "List comprehensions". For example, the squares of the
    even numbers between seven and nineteen can be generated by
        [n**2 for n in scipy.arange(7,19) if isEven(n)]
    List comprehensions return a list using the elements generated by the 
    "for" loop that satisfy the (optional) if expression.
    """
    return [n for n in range(2,nMax) if isPrime(n)]

primes = primeList(target_sqrt)
print(primes)
# %%

prime_factors = []
for each in primes:
    if target % each == 0:
        target = target//each
        prime_factors.append(each)
    if target == 1:
        break

print(prime_factors)
# %%
# largest prime factor = 6857
# Note: the above method is implicitly robust but not explicitly robust:
# if the "for" loop loops through all of the potential smallest prime factors 
# without reducing the target to zero, the remaining "target" value 
# will equal the largest prime factor